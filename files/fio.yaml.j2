# alias render_template='python3 -c "from jinja2 import Template; import sys; print(Template(sys.stdin.read()).render());"'
# cat fio_t.yaml | render_template > fio_jobs.yaml
# cat fio_t.yaml | render_template | kubectl apply -f -
# for job in $(kubectl get pods --no-headers -o custom-columns=":metadata.name"); do (kubectl logs $job > $job.log) ; done
# cat fio_t.yaml | render_template | kubectl delete -f -
# TODO: Ensure jobs run with anti-affinity
---
apiVersion: v1
data:
  job.fio: |
    [global]
    bs=4k
    size=32G
    readwrite=randrw
    rwmixread=30
    direct=1
    ioengine=libaio

    [qd32]
    iodepth=32

kind: ConfigMap
metadata:
  name: fio-jobs

{%- for n in range(1, 14) %}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fio-pv-claim-{{ n }}
  labels:
    app: fio
spec:
  storageClassName: network-block
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 40Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: fio-{{ n }}
  labels:
    jobgroup: fio
spec:
  parallelism: 1
  template:
    metadata:
      name: fio-{{ n }}
      labels:
        jobgroup: fio
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: jobgroup
                    operator: In
                    values:
                      - fio
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: fio
          image: xridge/fio
          command: ["fio", "/cfg/job.fio"]
          volumeMounts:
            - name: fio-job-vol
              mountPath: "/cfg"
              readOnly: true
            - name: fio-data-vol
              mountPath: "/data"
      volumes:
        - name: fio-job-vol
          configMap:
            name: fio-jobs
        - name: fio-data-vol
          persistentVolumeClaim:
            claimName: fio-pv-claim-{{ n }}
      restartPolicy: Never
{%- endfor %}